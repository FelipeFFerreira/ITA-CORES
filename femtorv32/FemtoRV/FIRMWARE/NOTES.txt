Rem: je viens de remplacer 'inline' par 'static inline' dans le driver
de SDCard, vérifier si ça marche encore du coup... -> OK

Rem: je viens d'inclure stdint.h au lieu de mes typedefs

https://github.com/MichaelBell/PicoMandlebrot

=========================================

Deux scripts de compilation à créer:
1) make_firmware_baremetal.sh 
   Pour créer l'image système, chargée à l'adresse 0, et dont le crt0.s initialise la pile.
      - un crt0.S
      - un script de linker femtorv32_OS.ld
      
   Pas réussi à faire un truc propre, et à ne pas linker avec le
crt0.S du systeme. 



2) make_firmware_program.sh
   Une image logicielle à charger juste après l'OS
      - un script de linker femtorv32_user_program.ld


3) implanter les instructions "priviledged" niveau M
   et implanter quelques appels systèmes (en particulier
   open / read / write), en utilisant la bibliothèque 
   de fonctions de @ultraembedded (Q: peut-on désactiver
   le buffering ? Sinon on aura deux niveaux de buffering
   avec les fonctions fread() / fwrite de la libc(), pas
   dramatique mais ça gache un peu de RAM et on en a pas
   tant que ça)

4) une interruption timer et un mini noyau multitache.

=========================================

Linker script: https://github.com/twilco/riscv-from-scratch

How to get default linker script:

1) ~/Packages/riscv64-unknown-elf-gcc-20171231-x86_64-linux-centos6/bin/riscv64-unknown-elf-ld --verbose -m elf32lriscv -b elf32-littleriscv > linkscript.ld

2) remove beginning and end of file

3) Tweak it: 
  __executable_start = SEGMENT_START("text_segment",0x000000);
  . = SEGMENT_START("text_segment", 0x000000);

REM: SP needs to be initialized elsewhere !
NOTE: We need also to change __global_pointer (make it point to IO_BASE)

4) Link using custom linker script: -Wl,-T,linkscript.ld
(note: linker script contains hardcoded paths)


=========================================

FemtoOS: embedded system

Current state: quick and dirty !
   standalone FIRMWARE/LIB
   custom crt0.s
   custom linker script
   generates executable with __start at address 0
   softfp and libm can be linked 

Goal:
   use riscv-gcc for embedded systems (newlib) "the right way"
   step1: create linker script and crt0.s 
          initialize gp as IO_BASE
	  
	  Test simple programs (blinker, OLED screen)
	  
	  Q: how newlib's stdio is initialized ? (putchar(), getchar() ?)
	      A: https://stackoverflow.com/questions/55014043/how-do-you-implement-printf-in-gcc-from-newlib
	         (implement read and write)

	  Q: how newlib's heap is initialized ?  (sbrk() ?)

          Rem: it seems that newlib uses the ECALL instruction (see libgloss/riscv in the sources)
	     What is the core supposed to do with ECALL ? Call an interrupt or something ?
	  
	  Test whether malloc works
	  Test whether C++ works
	  
   step2: create uart  -- Do we need interrupts ?
   
   step3: install commander.exe in low mem and user program in higher mem
   step4: install commander.exe and common libs in low mem and user program in higher mem,
          some kind of DLL: we generate a RAM image, and our EXE file will be just the higher part.

References:
   https://twilco.github.io/riscv-from-scratch/2019/03/10/riscv-from-scratch-1.html
   https://twilco.github.io/riscv-from-scratch/2019/04/27/riscv-from-scratch-2.html
   https://twilco.github.io/riscv-from-scratch/2019/07/08/riscv-from-scratch-3.html

==================================
FemtoUX: run Linux
    Step 1: interrupts
    Step 2: MMU (*much* simpler than I thought)
    
